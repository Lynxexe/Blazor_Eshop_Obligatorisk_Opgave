@page "/cart"
@using Blazor_Eshop_Obligatorisk_Opgave.Client.Pages.ShopComponents
@using EshopSharedLibrary.Interface
@using EshopSharedLibrary.Model.ShoppingCart
@using EshopSharedLibrary.Model.ShoppingCartModel
@using EshopSharedLibrary.Model
@using Blazor_Eshop_Obligatorisk_Opgave.Components
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IShoppingCartService shoppingCartService
@attribute [StreamRendering(true)]
<h3>Cart</h3>
<div id="vue-cart" class="quenched">
    <main class="margin-horizontal:auto max-width:container padding-horizontal:32">
        <div>
            <h1 class="font-weight:500 @@mq-960--margin-bottom:24 color:blue-265f8e font-size:36 line-height:1_222 margin-bottom:12 margin-top:24"></h1>
            <div class="display:flex flex-direction:column color:blue-265f8e margin-bottom:12">
                <TableTemplate HeaderNames="@TableHeaderNames">
                    <RowTemplate>
                        @if (shoppingCart?.ItemsInCart != null)
                        {
                            @foreach (var item in shoppingCart.ItemsInCart)
                            {
                                <CartItem Item="item" OnItemDeleted="HandleItemDeleted"></CartItem>
                            }
                        }
                    </RowTemplate>
                </TableTemplate>
            </div>
            @if(shoppingCart.ItemsInCart.Count > 0)
            {
                <Payment Total=@shoppingCartService.GetTotal() />
            }

        </div>
    </main>
</div>

<script>

</script>
@code {
    private List<TableHeaderName> TableHeaderNames = new() {
        new TableHeaderName("Product", 2),
        new TableHeaderName("Price", 1),
        new TableHeaderName("Quantity", 1),
        new TableHeaderName("Total", 1),
        new TableHeaderName("Remove", 1)
    };

    private ShoppingCart shoppingCart { get; set; }
    protected override void OnInitialized()
    {
        shoppingCart = shoppingCartService.Get();
    }

    private async Task HandleItemDeleted(ShoppingCartItem deletedItem)
    {
        shoppingCartService.DeleteProduct(deletedItem);
        shoppingCart = shoppingCartService.Get();
    }
    [JSInvokable]
    public async Task HandleCaptureSuccess(bool success)
    {
        if (success)
        {
            NavigationManager.NavigateTo("/success");
        }
        else
        {
            NavigationManager.NavigateTo("/error");
        }
    }
    [JSInvokable]
    public void HandleCaptureFailure()
    {
        NavigationManager.NavigateTo("/error");
    }
}
